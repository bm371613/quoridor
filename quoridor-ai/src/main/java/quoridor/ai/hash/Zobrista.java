package quoridor.ai.hash;

import com.google.common.collect.ImmutableList;

import quoridor.core.move.Move;
import quoridor.core.move.PawnMove;
import quoridor.core.move.WallMove;
import quoridor.core.position.Position;
import quoridor.core.state.GameState;
import quoridor.core.state.PlayerState;
import quoridor.core.state.WallOrientation;
import quoridor.core.state.WallsState;

public final class Zobrista implements IncrementalHash<GameState, Move> {

    private static final Zobrista INSTANCE = new Zobrista();

    private Zobrista() {
    }

    public static Zobrista getInstance() {
        return INSTANCE;
    }

    @Override
    public long of(GameState gameState) {
        long result = 0;

        // current player
        result ^= CURRENT_PLAYER_INDEX_MAGIC[gameState.currentPlayerIx()];

        // wall
        WallsState wallsState = gameState.getWallsState();
        for (int x = 0; x < GameState.WALL_PLACES; ++x) {
            for (int y = 0; y < GameState.WALL_PLACES; ++y) {
                result ^= wallMagic(x, y, wallsState.get(x, y));
            }
        }

        //players
        ImmutableList<PlayerState> playerStates = gameState.getPlayerStates();
        for (int i = 0; i < playerStates.size(); ++i) {
            PlayerState playerState = playerStates.get(i);
            Position position = playerState.getPosition();
            result ^= PLAYER_MAGIC[i][0][playerState.getWallsLeft()];
            result ^= PLAYER_MAGIC[i][1][position.getX()];
            result ^= PLAYER_MAGIC[i][2][position.getY()];
        }

        return result;
    }

    @Override
    public long after(GameState gameState, long hash, Move move) {
        switch (move.getType()) {
            case WALL:
                return after(gameState, hash, (WallMove) move);
            case PAWN:
                return after(gameState, hash, (PawnMove) move);
            default:
                throw new RuntimeException("Unsupported move");
        }
    }

    public long after(GameState gameState, long hash, WallMove move) {
        long result = hash;

        int playerIx = gameState.currentPlayerIx();
        PlayerState playerState = gameState.getCurrentPlayersState();
        result ^= CURRENT_PLAYER_INDEX_MAGIC[playerIx];
        result ^= CURRENT_PLAYER_INDEX_MAGIC[
                (playerIx + 1) % gameState.getPlayerStates().size()];

        int wallsLeft = playerState.getWallsLeft();
        result ^= PLAYER_MAGIC[playerIx][0][wallsLeft];
        result ^= PLAYER_MAGIC[playerIx][0][wallsLeft - 1];

        Position wallPosition = move.getPosition();
        int x = wallPosition.getX();
        int y = wallPosition.getY();

        result ^= wallMagic(x, y, null);
        result ^= wallMagic(x, y, move.getWallOrientation());

        return result;
    }

    public long after(GameState gameState, long hash, PawnMove move) {
        long result = hash;

        int playerIx = gameState.currentPlayerIx();
        PlayerState playerState = gameState.getCurrentPlayersState();
        result ^= CURRENT_PLAYER_INDEX_MAGIC[playerIx];
        result ^= CURRENT_PLAYER_INDEX_MAGIC[
                (playerIx + 1) % gameState.getPlayerStates().size()];

        result ^= PLAYER_MAGIC[playerIx][1][playerState.getX()];
        result ^= PLAYER_MAGIC[playerIx][1][move.getX()];

        result ^= PLAYER_MAGIC[playerIx][2][playerState.getY()];
        result ^= PLAYER_MAGIC[playerIx][2][move.getY()];

        return result;
    }

    private long wallMagic(int x, int y, WallOrientation wallOrientation) {
        if (wallOrientation == null) {
            return WALL_MAGIC[x][y][0];
        } else if (wallOrientation == WallOrientation.HORIZONTAL) {
            return WALL_MAGIC[x][y][1];
        } else {
            return WALL_MAGIC[x][y][2];
        }

    }

    private static final long[] CURRENT_PLAYER_INDEX_MAGIC = {
        -565192798445817781L,
        -2322410627778697833L,
        -8106216124291622270L,
        -2508258984780171090L
    };

    private static final long[][][] WALL_MAGIC = {
        {
        {-181069331305468551L, -7884107370405767848L, 8770095597243247505L},
        {-1493126210083105566L, -288929937271901251L, -2881331021938069261L},
        {6586864690225712310L, -7732348479822374922L, 3967298095824170490L},
        {-3111692895127820932L, -8417810633212958986L, -6350808162567334311L},
        {3314746670868229361L, 5824629999435324249L, 8044387151356182466L},
        {342185994750928206L, -3983047409318407448L, -8299843436683386968L},
        {2293875379936146066L, -3894655403938190287L, -5575738335263571110L},
        {6068965056647721126L, 8023376831992343854L, 4681329424463420664L}
        },
        {
        {7072215591269396116L, -569236069895426691L, 8675635348725315482L},
        {1708718367909514447L, 3467578495288748801L, 4523060184224647526L},
        {3125415240761429966L, 1256710058345704960L, 4353924949588243040L},
        {6196878727857446440L, 8130520337104780879L, -7899842287869167081L},
        {-148185590831300733L, 5417899032508180514L, -1677842011726066796L},
        {-7300642749828391902L, -2658204532640505619L, 76568331973189041L},
        {-6662817246917503873L, 22908196742137833L, -6439890592508221291L},
        {2297475341194006166L, -3312987843743952160L, -6579172924847415739L}
        },
        {
        {7568905878544576410L, 2653399131176372341L, -4672107412472033072L},
        {-9165609782656594460L, -8616824822744819183L, -387236165944573274L},
        {1067836315675394197L, -3298093943966825001L, 1361307739340661413L},
        {3201008532809749934L, -3835078380156098500L, -6268933396190686069L},
        {-3584366597795784947L, 6332444477855228377L, -332115051440141073L},
        {5325590875111190065L, -914382160671652710L, 8611611622163480477L},
        {-973504805668532016L, -5560826659872055924L, -286928031774369323L},
        {8836986491986305524L, 3855796471142528736L, 9008662645815313785L}
        },
        {
        {4731138296188027564L, -471743141055727356L, -226935371167047093L},
        {5902739068818140781L, -1991981459902433676L, -1308610822415972136L},
        {2192029693391159521L, -6284248902818133176L, -8277360591134329251L},
        {8122604592748642261L, -549735341716239864L, 5505434480872168861L},
        {7014255396126014973L, 8540352680465658474L, -8985071715120343477L},
        {-7886788301782035632L, -7540835350015296683L, -6276949966391281831L},
        {-8802822600507800610L, -2321891765328461667L, -2997105956454411444L},
        {-1644944006329510257L, -8055319548824716519L, 479144621142462161L}
        },
        {
        {-1465222189359481433L, 7723381278361409118L, -7729994074552050256L},
        {1014288943720849490L, 704074087901108946L, 1886493933646090862L},
        {2627200688582328242L, 8239107946488755756L, -7457241613669824218L},
        {-2675200337218222704L, 4150198818224737549L, 7611071340549648565L},
        {6569450847343663776L, -2691566773470763777L, -3996714129124388359L},
        {4079780896274743743L, 1265661599082898392L, -958805858294907940L},
        {1335209200908673279L, 9021883844878369489L, 4269300846957323633L},
        {5300139422507884408L, -6368123760150385771L, 6653823919251986641L}
        },
        {
        {7409755038894437964L, -6408731002017031128L, 3893601567515409977L},
        {-4716473472052716425L, -703647198026173830L, 380186574170706091L},
        {-8296418010873357084L, -5649013842201243660L, -5446422023836076761L},
        {-6592781312256510000L, -1326065891045532541L, 6548484351353514262L},
        {-3984932377523487214L, -7831135879826864390L, 5726256026368631340L},
        {-2365582964893595755L, -5956118865805422219L, 6125907539186706207L},
        {1882609930888873937L, 2348017070937480088L, 1995951859924409834L},
        {3079246779417962371L, -5067366167878355799L, -1544692390236461841L}
        },
        {
        {4411885733856357841L, -5976509127966757662L, 4176863460969799668L},
        {8864315813492842255L, -8510210569804279597L, -8214510043260394746L},
        {-2193615330222477838L, 6024269021016216848L, -2204188354665927511L},
        {-7911369026801733160L, -7372820887052206780L, 3822205442015893730L},
        {7273428893263867569L, 5004782569322284918L, -4695613371069405339L},
        {-8581993295131629549L, -3387980084536772743L, 6392596853033062133L},
        {3097397374572000998L, 1683807416849140842L, 5185785638213692618L},
        {-5918651851923613553L, -5285693500171847862L, -7893529635724354565L}
        },
        {
        {-2298766284158266525L, -2964541474202063858L, 6729311567376267027L},
        {7474805905567216228L, 520443495341407803L, -8952288971048699488L},
        {3497140281856195818L, 7795531435358615440L, 3286700783832195L},
        {9052442947425518043L, -3632629121969518010L, 5361659966738090741L},
        {4716336790707971064L, 3553276952136441432L, 6709816992489320927L},
        {-2649287345274918610L, -6548487752196187831L, 9052580062809662434L},
        {-5392277547807358476L, 2303779350348778988L, 2129770423024294415L},
        {2790102621620807809L, -3159897952825135094L, -3476252476175939897L}
        }
    };

    private static final long[][][] PLAYER_MAGIC = {
        { // player 0
        { // walls left
        -3186652950616618123L, -3723360449439764558L, 5238798264657581378L,
        -3870570994847182326L, -8063294083794755006L, -3691414404137564305L,
        -1911609188535863729L, 3145619928145888236L, 6265972314827282808L,
        268888330226413414L, -2178864602696726676L
        },
        { // pos x
        3444941671199781971L, 1091449816131553985L, -5007551833757746057L,
        -8567568088556083402L, 1439413063748550521L, 5207056718960662817L,
        -6902586308410161220L, -5173633752377211333L, 6471839142344661970L
        },
        { // pos y
        -3328443570679179384L, 2190322460533527822L, -8912271861842451047L,
        -4789626395875531723L, -8852526858943633993L, -4664798915080834243L,
        -8639738642404466608L, -5104336748695170464L, -5728195619867070894L
        }
        },
        { // player 1
        { // walls left
        -1038794614828178691L, -4931520832704770544L, 1908457230524755388L,
        2486365907326113353L, -2574627380016786500L, -5198126123046292929L,
        -4360258474591567262L, -8748616437835228794L, -7443552684767136319L,
        -1888275420027233610L, 1744625508557052475L
        },
        { // pos x
        4456630782506926279L, 3381059372415143463L, -2778601865290857668L,
        6832900156013461621L, -223257700121178036L, 1854212990730665082L,
        -6851539597978432689L, 8002114358138674781L, 8972943434368597690L
        },
        { // pos y
        -5069666437942793947L, -425860147822294291L, -351528660043821626L,
        1437475997750276702L, 7056903220637119083L, -62076253289934967L,
        6014999274780692548L, -1440100579340541305L, 3528334288672044351L
        },
        },
        { // player 2
        { // walls left
        -8845327965274740778L, 4728046403484795807L, 4560316034681590477L,
        7467761756240382853L, 3414601235922335283L, -6241852068671036128L,
        5545412236823219859L, 6717140502239553525L, 7941850642567114214L,
        -6980980736383895402L, 5801177334108888196L
        },
        { // pos x
        1333096215289774950L, -6627431365254951551L, -4743759967370036634L,
        2202782165487290988L, 7456175758438427100L, -8421588737465084432L,
        -5308688118278862586L, -4601046934132839595L, 464766884852193335L
        },
        { // pos y
        -3464481142851753530L, -5385674321449697415L, 258185193338653891L,
        8978042967869899017L, -2674107688501860549L, -2060172493287333303L,
        -5121257459688477756L, 6683296648250889344L, 655186662138035492L
        }
        },
        { // player 3
        { // walls left
        -7669962598235184904L, 3381469324012885733L, 89340016778412666L,
        6918463412611807782L, 684287884279483975L, -4869060289357991632L,
        6753699894255105768L, -1490963430239610815L, -3123641910545694600L,
        4261270173092888493L, 1707513363162863659L
        },
        { // pos x
        -7328766330437455672L, 2316954100763906270L, -8078175196999222741L,
        2180693247474279447L, 1153904206509411882L, 7458665791987790243L,
        -1772492065899362514L, -3884400088296986361L, -2216735318720613185L
        },
        { // pos y
        8524115136024625687L, -2724000115502254025L, 4486938112334740211L,
        2345445262849547853L, -8481734667956006007L, -7650707464753734103L,
        -6296714883610412767L, 925952486443400680L, -3288493257478777189L
        }
        }
    };
}
